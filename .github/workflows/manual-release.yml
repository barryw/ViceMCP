name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Additional release notes (optional)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get current version
      id: current
      run: |
        CURRENT=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "version=$CURRENT" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT"

    - name: Calculate new version
      id: new_version
      run: |
        CURRENT="${{ steps.current.outputs.version }}"
        BUMP="${{ github.event.inputs.version_bump }}"
        
        # Remove 'v' prefix
        VERSION="${CURRENT#v}"
        
        # Split version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        # Apply bump
        case "$BUMP" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update version in project files
      run: |
        # Update version in .csproj files (without 'v' prefix)
        VERSION_NUM="${{ steps.new_version.outputs.version }}"
        VERSION_NUM="${VERSION_NUM#v}"
        
        find . -name "*.csproj" -type f -exec sed -i "s|<Version>.*</Version>|<Version>$VERSION_NUM</Version>|g" {} \;
        find . -name "*.csproj" -type f -exec sed -i "s|<AssemblyVersion>.*</AssemblyVersion>|<AssemblyVersion>$VERSION_NUM</AssemblyVersion>|g" {} \;
        find . -name "*.csproj" -type f -exec sed -i "s|<FileVersion>.*</FileVersion>|<FileVersion>$VERSION_NUM</FileVersion>|g" {} \;
        find . -name "*.csproj" -type f -exec sed -i "s|<PackageVersion>.*</PackageVersion>|<PackageVersion>$VERSION_NUM</PackageVersion>|g" {} \;

    - name: Commit version bump
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if [[ -n $(git status -s) ]]; then
          git add -A
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}
          
          [skip ci]"
          git push
        fi

    - name: Generate release notes
      id: notes
      run: |
        LAST_TAG="${{ steps.current.outputs.version }}"
        NEW_TAG="${{ steps.new_version.outputs.version }}"
        
        # Start with custom notes if provided
        if [ -n "${{ github.event.inputs.release_notes }}" ]; then
          echo "${{ github.event.inputs.release_notes }}" > release-notes.md
          echo "" >> release-notes.md
          echo "---" >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        # Generate automatic notes
        echo "## What's Changed" >> release-notes.md
        echo "" >> release-notes.md
        
        # Get commit list
        if [ "$LAST_TAG" = "v0.0.0" ]; then
          git log --pretty=format:"- %s (%h)" --reverse >> release-notes.md
        else
          git log --pretty=format:"- %s (%h)" --reverse ${LAST_TAG}..HEAD >> release-notes.md
        fi
        
        echo "" >> release-notes.md
        echo "" >> release-notes.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${NEW_TAG}" >> release-notes.md
        
        # Output release notes
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create tag and release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create tag
        git tag -a "${{ steps.new_version.outputs.version }}" -m "Release ${{ steps.new_version.outputs.version }}"
        git push origin "${{ steps.new_version.outputs.version }}"
        
        # Create release
        gh release create "${{ steps.new_version.outputs.version }}" \
          --title "Release ${{ steps.new_version.outputs.version }}" \
          --notes "${{ steps.notes.outputs.notes }}" \
          --latest

    - name: Trigger release build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh workflow run release.yml -f version=${{ steps.new_version.outputs.version }}