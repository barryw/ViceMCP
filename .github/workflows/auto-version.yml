name: Auto Version and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '.gitignore'
      - '.editorconfig'

permissions:
  contents: write

jobs:
  version:
    name: Auto Version
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, 'chore: bump version')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get current version
      id: current
      run: |
        # Get the latest tag or default to v0.0.0
        CURRENT=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "version=$CURRENT" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT"

    - name: Analyze commits
      id: analyze
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --oneline)
        else
          COMMITS=$(git log --oneline ${LAST_TAG}..HEAD)
        fi
        
        echo "Commits since last release:"
        echo "$COMMITS"
        
        # Simple conventional commit analysis
        BUMP="patch"
        
        # Check for breaking changes
        if echo "$COMMITS" | grep -qE "(BREAKING CHANGE:|!:)"; then
          BUMP="major"
        # Check for features
        elif echo "$COMMITS" | grep -q "feat:"; then
          BUMP="minor"
        fi
        
        echo "bump=$BUMP" >> $GITHUB_OUTPUT
        echo "Determined version bump: $BUMP"

    - name: Calculate new version
      id: new_version
      run: |
        CURRENT="${{ steps.current.outputs.version }}"
        BUMP="${{ steps.analyze.outputs.bump }}"
        
        # Remove 'v' prefix
        VERSION="${CURRENT#v}"
        
        # Split version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        # Apply bump
        case "$BUMP" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Generate release notes
      id: notes
      run: |
        LAST_TAG="${{ steps.current.outputs.version }}"
        NEW_TAG="${{ steps.new_version.outputs.version }}"
        
        # Generate release notes
        cat > release-notes.md << EOF
        ## What's Changed
        
        EOF
        
        # Group commits by type
        if [ "$LAST_TAG" = "v0.0.0" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse ${LAST_TAG}..HEAD)
        fi
        
        # Features
        FEATURES=$(echo "$COMMITS" | grep "^- feat:" || true)
        if [ -n "$FEATURES" ]; then
          echo "### 🚀 Features" >> release-notes.md
          echo "$FEATURES" | sed 's/^- feat: /- /' >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        # Fixes
        FIXES=$(echo "$COMMITS" | grep "^- fix:" || true)
        if [ -n "$FIXES" ]; then
          echo "### 🐛 Bug Fixes" >> release-notes.md
          echo "$FIXES" | sed 's/^- fix: /- /' >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        # Other changes
        OTHERS=$(echo "$COMMITS" | grep -vE "^- (feat|fix):" || true)
        if [ -n "$OTHERS" ]; then
          echo "### 📝 Other Changes" >> release-notes.md
          echo "$OTHERS" >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${NEW_TAG}" >> release-notes.md
        
        # Output release notes
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create tag and release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create tag
        git tag -a "${{ steps.new_version.outputs.version }}" -m "Release ${{ steps.new_version.outputs.version }}"
        git push origin "${{ steps.new_version.outputs.version }}"
        
        # Create release
        gh release create "${{ steps.new_version.outputs.version }}" \
          --title "Release ${{ steps.new_version.outputs.version }}" \
          --notes "${{ steps.notes.outputs.notes }}" \
          --latest

    - name: Trigger release build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh workflow run release.yml -f version=${{ steps.new_version.outputs.version }}